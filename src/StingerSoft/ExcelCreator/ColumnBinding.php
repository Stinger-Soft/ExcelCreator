<?php

/*
 * This file is part of the Stinger Excel Creator package.
*
* (c) Oliver Kotte <oliver.kotte@stinger-soft.net>
* (c) Florian Meyer <florian.meyer@stinger-soft.net>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
namespace StingerSoft\ExcelCreator;

/**
 * Defines how each column in the excel sheet should be generated by defining the header,
 * the binding to the underlying data object and styling related options
 */
class ColumnBinding {

	/**
	 *
	 * @var string The label of the column header
	 */
	protected $label;

	/**
	 *
	 * @var string The translation domain to translate the given label. If set to false no translation will be applied.
	 */
	protected $labelTranslationDomain = false;

	/**
	 *
	 * @var string|callable The property path or callable to fetch the value of the bind object.
	 */
	protected $binding;

	/**
	 *
	 * @var string Set to true if the binded value may contain HTML characters.
	 */
	protected $decodeHtml = false;

	/**
	 *
	 * @var string Set to true to allow multilined values
	 */
	protected $wrapText = false;

	/**
	 *
	 * @var string The font color to be used for the column header
	 */
	protected $headerFontColor;

	/**
	 *
	 * @var string The background color to be used for the column header
	 */
	protected $headerBackgroundColor;

	/**
	 *
	 * @var string The font color to be used for the data cell
	 */
	protected $dataFontColor;

	/**
	 *
	 * @var string Background color to be used for the data cell
	 */
	protected $dataBackgroundColor;

	/**
	 *
	 * @var array A PHPExcel compatible styling array. This value will override the dataFontColor and dataBackgroundColor property
	 */
	protected $dataStyling;

	/**
	 *
	 * @var string|double The width of this column. If the value 'auto' is passed, excel will try to find a suiteable value
	 */
	protected $columnWidth = null;

	/**
	 *
	 * @var int The outline group of this column
	 */
	protected $outline = null;

	/**
	 * Callable to format the result
	 *
	 * @var callable
	 */
	protected $formatter;

	protected $linkUrl = null;

	/**
	 * Default contructor
	 *
	 * @param string $label
	 * @param string|callable $binding
	 */
	public function __construct($label = null, $binding = null) {
		$this->label = $label;
		$this->binding = $binding;
	}

	/**
	 * Set the URL of the hyperlink or a callable for generating the URL for a hyperlink 
	 * for a cell of that column to or <code>null</code> to not add a hyperlink.
	 * 
	 * @param string|callable $url the URL of the hyperlink or a callable for generating the URL for a hyperlink 
	 * for a cell of that column to or <code>null</code> to not add a hyperlink.
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setLinkUrl($url) {
		$this->linkUrl = $url;

		return $this;
	}

	/**
	 * Get the URL to point a hyperlink  for a cell of that column to or <code>null</code> to not add a hyperlink.
	 * 
	 * @return string|callable the URL to point a hyprelink for a cell of that column to or <code>null</code> to not add a hyperlink.
	 */
	public function getLinkUrl() {
		return $this->linkUrl;
	}

	/**
	 * Returns the label of the column header
	 *
	 * @return string The label of the column header
	 */
	public function getLabel() {
		return $this->label;
	}

	/**
	 * Sets the label of the column header
	 *
	 * @param string $label
	 *        	The label of the column header
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setLabel($label) {
		$this->label = $label;
		return $this;
	}

	/**
	 * Returns the translation domain to translate the given label.
	 * If set to false no translation will be applied.
	 *
	 * @return string The translation domain to translate the given label. If set to false no translation will be applied.
	 */
	public function getLabelTranslationDomain() {
		return $this->labelTranslationDomain;
	}

	/**
	 * Set the translation domain to translate the given label.
	 * If set to false no translation will be applied.
	 *
	 * @param string $labelTranslationDomain
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setLabelTranslationDomain($labelTranslationDomain) {
		$this->labelTranslationDomain = $labelTranslationDomain;
		return $this;
	}

	/**
	 * Returns the property path or callable to fetch the value of the bind object.
	 *
	 * @return string|callable The property path or callable to fetch the value of the bind object.
	 */
	public function getBinding() {
		return $this->binding;
	}

	/**
	 * Sets the property path or callable to fetch the value of the bind object.
	 *
	 * @param string|callable $binding
	 *        	The property path or callable to fetch the value of the bind object.
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setBinding($binding) {
		$this->binding = $binding;
		return $this;
	}

	/**
	 * Returns true if the binded value may contain HTML characters.
	 *
	 * @return boolean
	 */
	public function getDecodeHtml() {
		return $this->decodeHtml;
	}

	/**
	 * Set to true if the binded value may contain HTML characters.
	 *
	 * @param boolean $decodeHtml
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setDecodeHtml($decodeHtml) {
		$this->decodeHtml = $decodeHtml;
		return $this;
	}

	/**
	 * Returns if the value should be wrapped
	 *
	 * @return boolean
	 */
	public function getWrapText() {
		return $this->wrapText;
	}

	/**
	 * Set to true to allow multilined values
	 *
	 * @param boolean $wrapText
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setWrapText($wrapText) {
		$this->wrapText = $wrapText;
		return $this;
	}

	/**
	 * Returns the font color to be used for the column header
	 *
	 * @return string The font color to be used for the column header
	 */
	public function getHeaderFontColor() {
		return $this->headerFontColor;
	}

	/**
	 * Sets the font color to be used for the column header
	 *
	 * @param string $headerFontColor
	 *        	The font color to be used for the column header
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setHeaderFontColor($headerFontColor) {
		$this->headerFontColor = $headerFontColor;
		return $this;
	}

	/**
	 * Returns the background color to be used for the column header
	 *
	 * @return string The background color to be used for the column header
	 */
	public function getHeaderBackgroundColor() {
		return $this->headerBackgroundColor;
	}

	/**
	 * Sets the background color to be used for the column header
	 *
	 * @param string $headerBackgroundColor
	 *        	The background color to be used for the column header
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setHeaderBackgroundColor($headerBackgroundColor) {
		$this->headerBackgroundColor = $headerBackgroundColor;
		return $this;
	}

	/**
	 * Returns the font color to be used for the data cell
	 *
	 * @return string The font color to be used for the data cell
	 */
	public function getDataFontColor() {
		return $this->dataFontColor;
	}

	/**
	 * Sets the font color to be used for the data cell
	 *
	 * @param string $dataFontColor
	 *        	The font color to be used for the data cell
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setDataFontColor($dataFontColor) {
		$this->dataFontColor = $dataFontColor;
		return $this;
	}

	/**
	 * Returns the background color to be used for the data cell
	 *
	 * @return string The background color to be used for the data cell
	 */
	public function getDataBackgroundColor() {
		return $this->dataBackgroundColor;
	}

	/**
	 * Sets the background color to be used for the data cell
	 *
	 * @param string $dataBackgroundColor
	 *        	The background color to be used for the data cell
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setDataBackgroundColor($dataBackgroundColor) {
		$this->dataBackgroundColor = $dataBackgroundColor;
		return $this;
	}

	/**
	 * Returns the width of this column.
	 * If the value 'auto' is passed, excel will try to find a suiteable value
	 *
	 * @return string|double The width of this column. If the value 'auto' is passed, excel will try to find a suiteable value
	 */
	public function getColumnWidth() {
		return $this->columnWidth;
	}

	/**
	 * Sets the width of this column.
	 * If the value 'auto' is passed, excel will try to find a suiteable value
	 *
	 * @param string|double $columnWidth
	 *        	The width of this column. If the value 'auto' is passed, excel will try to find a suiteable value
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setColumnWidth($columnWidth) {
		$this->columnWidth = $columnWidth;
		return $this;
	}

	/**
	 * Returns the outline group of this column
	 *
	 * @return int The outline group of this column
	 */
	public function getOutline() {
		return $this->outline;
	}

	/**
	 * Sets the outline group of this column
	 *
	 * @param int $outline
	 *        	The outline group of this column
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setOutline($outline) {
		$this->outline = $outline;
		return $this;
	}

	/**
	 * Returns a PHPExcel compatible styling array.
	 * This value will override the dataFontColor and dataBackgroundColor property
	 *
	 * @return array|callable A PHPExcel compatible styling array. This value will override the dataFontColor and dataBackgroundColor property
	 */
	public function getDataStyling() {
		return $this->dataStyling;
	}

	/**
	 * Sets a PHPExcel compatible styling array.
	 * This value will override the dataFontColor and dataBackgroundColor property
	 *
	 * @param array|callable $dataStyling
	 *            A PHPExcel compatible styling array. This value will override the dataFontColor and dataBackgroundColor property
	 * @return $this
	 */
	public function setDataStyling($dataStyling) {
		$this->dataStyling = $dataStyling;
		return $this;
	}

	/**
	 * Returns a callable to format the result
	 *
	 * @return callable
	 */
	public function getFormatter() {
		return $this->formatter;
	}

	/**
	 * Set the callable to format the result
	 *
	 * @param callable $formatter
	 *        	The callable to format the result
	 * @return \StingerSoft\ExcelCreator\ColumnBinding
	 */
	public function setFormatter($formatter) {
		$this->formatter = $formatter;
		return $this;
	}
}