<?php
declare(strict_types=1);

/*
 * This file is part of the Stinger Excel Creator package.
*
* (c) Oliver Kotte <oliver.kotte@stinger-soft.net>
* (c) Florian Meyer <florian.meyer@stinger-soft.net>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/

namespace StingerSoft\ExcelCreator;

use StingerSoft\ExcelCreator\DataType\DataTypes;

/**
 * Defines how each column in the excel sheet should be generated by defining the header,
 * the binding to the underlying data object and styling related options
 */
class ColumnBinding {

	/**
	 *
	 * @var string|null The label of the column header
	 */
	protected $label;

	/**
	 *
	 * @var string|bool|null The translation domain to translate the given label. If set to false no translation will be applied.
	 */
	protected $labelTranslationDomain = false;

	/**
	 *
	 * @var string|callable|null The property path or callable to fetch the value of the bind object.
	 */
	protected $binding;

	/**
	 *
	 * @var bool Set to true if the bound value may contain HTML characters.
	 */
	protected $decodeHtml = false;

	/**
	 *
	 * @var bool Set to true to allow multi-lined values
	 */
	protected $wrapText = false;

	/**
	 *
	 * @var string|null The font color to be used for the column header
	 */
	protected $headerFontColor;

	/**
	 *
	 * @var string|null The background color to be used for the column header
	 */
	protected $headerBackgroundColor;

	/**
	 *
	 * @var string|null The font color to be used for the data cell
	 */
	protected $dataFontColor;

	/**
	 *
	 * @var string|null Background color to be used for the data cell
	 */
	protected $dataBackgroundColor;

	/**
	 *
	 * @var array|null A PHPExcel compatible styling array. This value will override the dataFontColor and dataBackgroundColor property
	 */
	protected $dataStyling;

	/**
	 *
	 * @var string|float|null The width of this column. If the value 'auto' is passed, excel will try to find a suitable value
	 */
	protected $columnWidth;

	/**
	 *
	 * @var int|null The outline group of this column
	 */
	protected $outline;

	/**
	 * Callable to format the result
	 *
	 * @var callable|null
	 */
	protected $formatter;

	/**
	 * @var callable|null Allows to make changes on the underlying cell object.
	 */
	protected $internalCellModifier;

	/**
	 * @var string|callable||null
	 */
	protected $linkUrl;

	/**
	 * Allows to explicitly define the cell type
	 *
	 * @see DataTypes constant values
	 *
	 * @var null|string
	 */
	protected $forcedCellType;

	/**
	 * Default constructor
	 *
	 * @param string|null          $label
	 * @param string|callable|null $binding
	 */
	public function __construct(string $label = null, $binding = null) {
		$this->label = $label;
		$this->binding = $binding;
	}

	/**
	 * Get the URL to point a hyperlink  for a cell of that column to or <code>null</code> to not add a hyperlink.
	 *
	 * @return string|callable|null the URL to point a hyperlink for a cell of that column to or <code>null</code> to not add a hyperlink.
	 */
	public function getLinkUrl() {
		return $this->linkUrl;
	}

	/**
	 * Set the URL of the hyperlink or a callable for generating the URL for a hyperlink
	 * for a cell of that column to or <code>null</code> to not add a hyperlink.
	 *
	 * @param string|callable|null $url the URL of the hyperlink or a callable for generating the URL for a hyperlink
	 *                                  for a cell of that column to or <code>null</code> to not add a hyperlink.
	 * @return ColumnBinding
	 */
	public function setLinkUrl($url): self {
		$this->linkUrl = $url;

		return $this;
	}

	/**
	 * Returns the label of the column header
	 *
	 * @return string|null The label of the column header
	 */
	public function getLabel(): ?string {
		return $this->label;
	}

	/**
	 * Sets the label of the column header
	 *
	 * @param string|null $label
	 *            The label of the column header
	 * @return ColumnBinding
	 */
	public function setLabel(?string $label): self {
		$this->label = $label;
		return $this;
	}

	/**
	 * Returns the translation domain to translate the given label.
	 * If set to false no translation will be applied.
	 *
	 * @return string|bool|null The translation domain to translate the given label. If set to false no translation will be applied.
	 */
	public function getLabelTranslationDomain() {
		return $this->labelTranslationDomain;
	}

	/**
	 * Set the translation domain to translate the given label.
	 * If set to false no translation will be applied.
	 *
	 * @param string|bool|null $labelTranslationDomain
	 * @return ColumnBinding
	 */
	public function setLabelTranslationDomain($labelTranslationDomain = null): self {
		$this->labelTranslationDomain = $labelTranslationDomain;
		return $this;
	}

	/**
	 * Returns the property path or callable to fetch the value of the bind object.
	 *
	 * @return string|callable The property path or callable to fetch the value of the bind object.
	 */
	public function getBinding() {
		return $this->binding;
	}

	/**
	 * Sets the property path or callable to fetch the value of the bind object.
	 *
	 * @param string|callable $binding
	 *            The property path or callable to fetch the value of the bind object.
	 * @return ColumnBinding
	 */
	public function setBinding($binding): self {
		$this->binding = $binding;
		return $this;
	}

	/**
	 * Returns true if the bound value may contain HTML characters.
	 *
	 * @return boolean
	 */
	public function getDecodeHtml(): bool {
		return $this->decodeHtml;
	}

	/**
	 * Set to true if the bound value may contain HTML characters.
	 *
	 * @param boolean $decodeHtml
	 * @return ColumnBinding
	 */
	public function setDecodeHtml(?bool $decodeHtml = false): self {
		$this->decodeHtml = $decodeHtml;
		return $this;
	}

	/**
	 * Returns if the value should be wrapped
	 *
	 * @return boolean
	 */
	public function getWrapText(): bool {
		return $this->wrapText;
	}

	/**
	 * Set to true to allow multi-lined values
	 *
	 * @param boolean $wrapText
	 * @return ColumnBinding
	 */
	public function setWrapText(?bool $wrapText = false): self {
		$this->wrapText = $wrapText;
		return $this;
	}

	/**
	 * Returns the font color to be used for the column header
	 *
	 * @return string|null The font color to be used for the column header
	 */
	public function getHeaderFontColor(): ?string {
		return $this->headerFontColor;
	}

	/**
	 * Sets the font color to be used for the column header
	 *
	 * @param string|null $headerFontColor
	 *            The font color to be used for the column header
	 * @return ColumnBinding
	 */
	public function setHeaderFontColor(?string $headerFontColor = null): self {
		$this->headerFontColor = $headerFontColor;
		return $this;
	}

	/**
	 * Returns the background color to be used for the column header
	 *
	 * @return string|null The background color to be used for the column header
	 */
	public function getHeaderBackgroundColor(): ?string {
		return $this->headerBackgroundColor;
	}

	/**
	 * Sets the background color to be used for the column header
	 *
	 * @param string|null $headerBackgroundColor
	 *            The background color to be used for the column header
	 * @return ColumnBinding
	 */
	public function setHeaderBackgroundColor(?string $headerBackgroundColor = null): self {
		$this->headerBackgroundColor = $headerBackgroundColor;
		return $this;
	}

	/**
	 * Returns the font color to be used for the data cell
	 *
	 * @return string|null The font color to be used for the data cell
	 */
	public function getDataFontColor(): ?string {
		return $this->dataFontColor;
	}

	/**
	 * Sets the font color to be used for the data cell
	 *
	 * @param string|null $dataFontColor
	 *            The font color to be used for the data cell
	 * @return ColumnBinding
	 */
	public function setDataFontColor(?string $dataFontColor = null): self {
		$this->dataFontColor = $dataFontColor;
		return $this;
	}

	/**
	 * Returns the background color to be used for the data cell
	 *
	 * @return string|null The background color to be used for the data cell
	 */
	public function getDataBackgroundColor(): ?string {
		return $this->dataBackgroundColor;
	}

	/**
	 * Sets the background color to be used for the data cell
	 *
	 * @param string|null $dataBackgroundColor
	 *            The background color to be used for the data cell
	 * @return ColumnBinding
	 */
	public function setDataBackgroundColor(?string $dataBackgroundColor = null): self {
		$this->dataBackgroundColor = $dataBackgroundColor;
		return $this;
	}

	/**
	 * Returns the width of this column.
	 * If the value 'auto' is passed, excel will try to find a suitable value
	 *
	 * @return string|float|null The width of this column. If the value 'auto' is passed, excel will try to find a suitable value
	 */
	public function getColumnWidth() {
		return $this->columnWidth;
	}

	/**
	 * Sets the width of this column.
	 * If the value 'auto' is passed, excel will try to find a suitable value
	 *
	 * @param string|float|null $columnWidth
	 *            The width of this column. If the value 'auto' is passed, excel will try to find a suiteable value
	 * @return ColumnBinding
	 */
	public function setColumnWidth($columnWidth): self {
		$this->columnWidth = $columnWidth;
		return $this;
	}

	/**
	 * Returns the outline group of this column
	 *
	 * @return int|null The outline group of this column
	 */
	public function getOutline(): ?int {
		return $this->outline;
	}

	/**
	 * Sets the outline group of this column
	 *
	 * @param int|null $outline
	 *            The outline group of this column
	 * @return ColumnBinding
	 */
	public function setOutline(?int $outline = null): self {
		$this->outline = $outline;
		return $this;
	}

	/**
	 * Returns a PHPExcel compatible styling array.
	 * This value will override the dataFontColor and dataBackgroundColor property
	 *
	 * @return array|callable|null A PHPExcel compatible styling array. This value will override the dataFontColor and dataBackgroundColor property
	 */
	public function getDataStyling() {
		return $this->dataStyling;
	}

	/**
	 * Sets a PHPExcel compatible styling array.
	 * This value will override the dataFontColor and dataBackgroundColor property
	 *
	 * @param array|callable|null $dataStyling
	 *            A PHPExcel compatible styling array. This value will override the dataFontColor and dataBackgroundColor property
	 * @return self
	 */
	public function setDataStyling($dataStyling): self {
		$this->dataStyling = $dataStyling;
		return $this;
	}

	/**
	 * Returns a callable to format the result
	 *
	 * @return callable|null
	 */
	public function getFormatter(): ?callable {
		return $this->formatter;
	}

	/**
	 * Set the callable to format the result
	 *
	 * @param callable|null $formatter
	 *            The callable to format the result
	 * @return ColumnBinding
	 */
	public function setFormatter(?callable $formatter = null): self {
		$this->formatter = $formatter;
		return $this;
	}

	/**
	 * @return null|string
	 */
	public function getForcedCellType(): ?string {
		return $this->forcedCellType;
	}

	/**
	 * Explicitly define the cell type
	 *
	 * @param null|string $forcedCellType
	 * @return ColumnBinding
	 */
	public function setForcedCellType(?string $forcedCellType = null): self {
		$this->forcedCellType = $forcedCellType;
		return $this;
	}

	/**
	 * @return callable|null
	 */
	public function getInternalCellModifier(): ?callable {
		return $this->internalCellModifier;
	}

	/**
	 * Set a callable to modify the internal cell object
	 *
	 * @param callable|null $internalCellModifier
	 * @return ColumnBinding
	 */
	public function setInternalCellModifier(?callable $internalCellModifier = null): self {
		$this->internalCellModifier = $internalCellModifier;
		return $this;
	}

}